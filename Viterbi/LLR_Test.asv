clear all

genPoly1 = [1 0 1 1 0 1 1];
genPoly2 = [1 1 1 1 0 0 1];
genPoly3 = [1 1 1 0 1 0 1];
genPoly = [genPoly1;genPoly2;genPoly3];

dataStream = [1 0 1 1 1 0 0 0];
% genPoly1 = [1 1 1];
% genPoly2 = [1 0 1];
% genPoly = [genPoly1;genPoly2];
[m,n] = size(genPoly);

parity = 'gCRC8';
softHard ='Soft';
codingRate = (1/m);
transPortFrameSize = 256;%256;
interleaver = 1;
TTI = ['10 ms' '20 ms' '40 ms' '80 ms'];
ttiIndex = 4;
blSize = 0; % Block noise size

mem = length(genPoly)-1;
states = 2^mem; 
statesDec = 0:states-1;
[ statesBinary ] = viterbiDec2Bi(statesDec, mem);

EbNo_dB = 6;                        % Energy per bit to noise power spectral density ratio (Eb/No)
EbNo_lin = 10.^(EbNo_dB / 10);      % Eb/No values in linear scale                             % Distance between bits
A= 1;
M = 2^4;
Es = ((2*(M-1))/3)*A^2;             % Energy per symbol
% Es = 2;                           % Energy per symbol
k = log2(M);                        % bits per symbol       
Eb = Es / k;                        % Energy per bit
packetSize = 256-8;
[ xorIndex, numGenPoly, genPolyElements ] = xorRegister( genPoly );

% Symbol definition
% ------------
symbArray =[-3+3i,-3+1i,-3-3i,-3-1i,-1+3i,-1+1i,-1-3i,-1-1i,3+3i,3+1i,3-3i,3-1i,1+3i,1+1i,1-3i,1-1i];
% symbArray = [-1 1];
% symbArray =[-1-1i,1-1i,-1+1i,1+1i];

bitStreamSize = packetSize;
txPacket = (rand(1,bitStreamSize) > 0.5); 
% txPacket = dataStream;

% Encode data stream
% ------------------
[ dataStreamcrc ] = crc_TS36212('Transmitter', txPacket, parity);

nBits = length(dataStreamcrc);
[ codeWord ] = encodeData( dataStreamcrc, genPoly, numGenPoly );
numcodeWord = length(codeWord);
if transPortFrameSize< numcodeWord
    newPacketSize = numcodeWord - transPortFrameSize;
else
    newPacketSize = transPortFrameSize;
end

% Interleaver
% -----------
 if interleaver==1
     [ ti, Ti, DeltaNij, Fi, Nij, rateChangeArray ] = interLeaver1st( codeWord, ttiIndex, newPacketSize );
     [ Eini , Eplus , Eminus, DeltaNi ] = GetRateMatchParametersNonTurbo ( DeltaNij , Nij , Fi );
     if DeltaNi ~=0
         Ni=Nij+DeltaNi;
         xi = zeros(Ni,Fi);
         testArray = xi;
         for i = 0:Fi-1
             ci = ti(:,i+1);
             Ci = length(ci);
             [ xi, testArray ] = rateMatching( ci, Ci, DeltaNi,  Eini , Eplus , Eminus, xi, Ni, i,testArray  );
         end
         interleavercodeWord = reshape(xi,1,[]);
     else
         interleavercodeWord = reshape(ti,1,[]);
     end
 else
     interleavercodeWord = xi;
 end

% [frameRow,frameCol]=size(codeWord);
txFrame = reshape(interleavercodeWord,1,k,[]);
[m, n, newFrameSize] = size(txFrame);
txIdx = Bi2Dec(txFrame,k)+1;       

% Modulation
% ------------
% From look up table determine symbol to be transmitted
txSymb = symbArray(txIdx); 

% Define AWGN normalised
% ----------------------
AWGN = ((randn(1,newFrameSize))+1i*(randn(1,newFrameSize)))/sqrt(2);
No = (Eb./(EbNo_lin));
noiseVar = No/2;
Noise = sqrt(No).*AWGN;

% Transmit over Medium
% ---------------------
rxSymb = txSymb;% + Noise;

% Add Block Noise
% ---------------
midPoint = (newFrameSize/2);
rxSymb(1,midPoint:midPoint+blSize-1)=(randn(1,blSize)+1i*randn(1,blSize))/sqrt(2);

% LRR Temp
% --------
r = rxSymb;     % Recieved Vector

prob_log = zeros(length(r),k,2);

yb0(1,:) = [-3+3i,-3+1i,-3-3i,-3-1i,-1+3i,-1+1i,-1-3i,-1-1i];
yb0(2,:) = [3+3i,3+1i,3-3i,3-1i,1+3i,1+1i,1-3i,1-1i];
yb1(1,:) = [-3+3i,-3+1i,-3-3i,-3-1i,3+3i,3+1i,3-3i,3-1i];
yb1(2,:) = [-1+3i,-1+1i,-1-3i,-1-1i,1+3i,1+1i,1-3i,1-1i];
yb2(1,:) = [-3+3i,-3+1i,-1+3i,-1+1i,3+3i,3+1i,1+3i,1+1i];
yb2(2,:) = [-3-3i,-3-1i,-1-3i,-1-1i,3-3i,3-1i,1-3i,1-1i];
yb3(1,:) = [-3+3i,-3-3i,-1+3i,-1-3i,3+3i,3-3i,1+3i,1-3i];
yb3(2,:) = [-3+1i,-3-1i,-1+1i,-1-1i,3+1i,3-1i,1+1i,1-1i];

for i = 1:length(r)
    for ii = 1:k/2 % for number of real or imaginary bits
        
        yprob_b0(i,:,ii) = ((1/(sqrt(2*pi*noiseVar)))*(exp(-(1/2)*((abs(r(i)-yb0(ii,:)).^2)/(noiseVar^2)))));
        yprob_b1(i,:,ii) = ((1/(sqrt(2*pi*noiseVar)))*(exp(-(1/2)*((abs(r(i)-yb1(ii,:)).^2)/(noiseVar^2)))));
        yprob_b2(i,:,ii) = ((1/(sqrt(2*pi*noiseVar)))*(exp(-(1/2)*((abs(r(i)-yb2(ii,:)).^2)/(noiseVar^2)))));
        yprob_b3(i,:,ii) = ((1/(sqrt(2*pi*noiseVar)))*(exp(-(1/2)*((abs(r(i)-yb3(ii,:)).^2)/(noiseVar^2)))));
        
    end
    % p(r|y=1)/p(r|y=0)
    % ----------------
    yb0_sum(i,:) = sum(yprob_b0(i,:,2))/sum(yprob_b0(i,:,1));
    yb1_sum(i,:) = sum(yprob_b1(i,:,2))/sum(yprob_b1(i,:,1));
    yb2_sum(i,:) = sum(yprob_b2(i,:,2))/sum(yprob_b2(i,:,1));
    yb3_sum(i,:) = sum(yprob_b3(i,:,2))/sum(yprob_b3(i,:,1));
    
end

% [log(abs(b0_log)), r.']
llr1 = log((yb0_sum));
llr2 = log((yb1_sum));
llr3 = log((yb2_sum));
llr4 = log((yb3_sum));
% Hard Decision Check
% -------------------
outArray = zeros(k,length(rxSymb));
for i = 1:length(rxSymb)
    if llr1(i)>=0
        outArray(1,i)=1;
    end
    if llr2(i)>=0
        outArray(2,i)=1;
    end
    if llr3(i)>=0
        outArray(3,i)=1;
    end
    if llr4(i)>=0
        outArray(4,i)=1;
    end
end
% Define LLR Array
% ----------------
cmptc = squeeze(txFrame);
LLR = zeros(k,length(rxSymb));
LLR(1,:) = llr1;
LLR(2,:) = llr2;
LLR(3,:) = llr3;
LLR(4,:) = llr4;

% Deinterleaving
% --------------
if interleaver==1
    switch softHard
        case 'Hard'
            [ rxFrame ,rxFrameBlock ] = deInterleaveer1st( reshape(outArray,1,[]),ttiIndex, numGenPoly );
        case 'Soft' 
            [ bi ] = deInterleaverCol(  reshape(LLR,1,[]),ttiIndex );
            if DeltaNi ~=0
                Ni = Nij;
                yi = zeros(Ni,Fi);
                for i = 0:Fi-1
                    ai = bi(:,i+1);
                    Ai = length(ai);
                    [ yi ] = deRateMatching( ai, Ci, DeltaNij,  Eini(i+1) , Eplus , Eminus, yi, 22, i, testArray );
                end
                % Use inter column permutation pattern
                InterColumnPermutation{1} = 0;
                InterColumnPermutation{2} = [0 1];
                InterColumnPermutation{3} = [0 2 1 3];
                InterColumnPermutation{4} = [0 4 2 6 1 5 3 7];
                yi = yi(:,InterColumnPermutation{ttiIndex}+1);
                [ yi ] = readOutBits( yi, numcodeWord, Fi );
%                 interleavercodeWord = reshape(yi,1,[]);
%                 testArray = testArray(:,InterColumnPermutation{ttiIndex}+1);
% %                 testArray = reshape(testArray,1,[]);
%                 [ testArray ] = readOutBits( testArray, numcodeWord, Fi );

            else
                InterColumnPermutation{1} = 0;
                InterColumnPermutation{2} = [0 1];
                InterColumnPermutation{3} = [0 2 1 3];
                InterColumnPermutation{4} = [0 4 2 6 1 5 3 7];
                yi = bi(:,InterColumnPermutation{ttiIndex}+1);
                [ yi ] = readOutBits( yi, numcodeWord, Fi );
%                 yi = reshape(bi,1,[]);
            end
    end
%     [ rxFrame ,rxFrameBlock ] = deInterleaveer1st(
%     reshape(outArray,1,[]),ttiIndex, numGenPoly );
%     [ rxLLR, rxLLRBlock ] = deInterleaveer1st(
%     reshape(LLR,1,[]),ttiIndex, numGenPoly );
    numStateBits = length(statesBinary(1,:));
    rows = 256;
    rxLLRBlock = zeros(rows,numGenPoly);
    for i = 0:rows-1
        Index = i*numGenPoly;
        for ii = 1:numGenPoly
        rxLLRBlock(i+1,ii) = yi(Index+ii);
        end
    end
    [m, n] =size(rxLLRBlock);
    newLLR = reshape(rxLLRBlock,m,1,n);
end

% Define Trellis map for Decoder
% ------------------------------
stages  = nBits+1;          % Number of stages in trellis

% Compute Branch Logic
% --------------------
inputValue = [0 1];
numInput = length(inputValue);
branchValues = zeros(states,numGenPoly,numInput );
nextState = zeros(states,mem,numInput );
for i = 1:states
    for ii = 1:numInput
        register = [inputValue(ii), statesBinary(i,:)];
        [ branchLogic, branchLogicBlock, nBits, State ] = encodeDataStream( register, newLLR, xorIndex, numGenPoly, mem, 'Trellis Map' );
        branchValues(i,:,ii) = branchLogic;
        nextState(i,:,ii) = State;
    end
end
[m,n]=size(newLLR);

[ nextState ] = viterbiBi2Dec(nextState);
[ BranchNum ] = viterbiBi2Dec(branchValues);
currentStates = statesDec + 1;

% Define Nodes
% ------------
PreviousState = NaN(states,1);
Value = NaN(states,1);
Logic = NaN(states,1);
Surviver = NaN;
Decode = NaN;
Visit = zeros(states,1);
hammDistance = zeros(states,numInput,stages-1 );
strucStages = struct('States',{currentStates},'BranchLogic',{branchValues},'NextState',{nextState},'PreviousState',{PreviousState},'Visit',{Visit},'Value',{Value},'CodeWord',{[NaN NaN]},'SurviverPath',{Surviver},'Decode',{Logic},'SurviverDecode',{Decode},'HammDistance',{hammDistance});
strucStages = repmat(strucStages,1,stages);

% LLR Branch Metric
llrTest= NaN(n,m);
llrStates=NaN(8,m);

[ temp1 ] = viterbiDec2Bi(0:(2^numGenPoly) -1, numGenPoly);
% temp1 = branchValues(:,:,1);
for i = 1:8
    for ii = 1:numGenPoly
        if temp1(i,ii)==0
           temp = -newLLR(:,:,ii);
        else
            temp = +newLLR(:,:,ii);
        end
        llrTest(ii,:)=temp;
    end
    llrStates(i,:) = sum(llrTest);
end
for i = 1:stages-1
%     currentCodeWord = repmat(rxFrameBlock(i,:),states,1);
    for ii = 1:numInput
%         hammDistance(:,ii,i) =
%         sum(branchValues(:,:,ii)~=currentCodeWord,numInput);
        lrrM(:,ii,i)=llrStates(BranchNum(:,ii),i);
    end
%     strucStages(i).HammDistance = hammDistance(:,:,i);
%     strucStages(i).CodeWord = codeWordBlock(i,:);
    strucStages(i).llrMetric = lrrM(:,:,i);

end

% Initialise Node
% --------------
strucStages(1).Value(1) = 0;
strucStages(1).Visit(1) = 1;

for i = 1:stages-1
    for ii = 1:states
        if isnan(strucStages(i).Value(ii)) == 0
            for j = 1:numInput
                newState = strucStages(i).NextState(ii,j);
                strucStages(i+1).Visit(newState) = strucStages(i+1).Visit(newState) + 1;
                if strucStages(i+1).Visit(newState)~= 2
                    switch softHard
                        case 'Hard'
                            strucStages(i+1).Value(newState) = strucStages(i).Value(ii) + strucStages(i).HammDistance(ii,j);
                        case 'Soft'
                            strucStages(i+1).Value(newState) = strucStages(i).Value(ii) + strucStages(i).llrMetric(ii,j);
                    end
                    strucStages(i+1).PreviousState(newState) = strucStages(i).States(ii);
                    strucStages(i+1).Decode(newState) = j-1;
                else
                    switch softHard
                        case 'Hard'
                            accMetric = strucStages(i).Value(ii) + strucStages(i).HammDistance(ii,j);
                            if accMetric <= strucStages(i+1).Value(newState)
                                strucStages(i+1).Value(newState) = accMetric;
                                strucStages(i+1).PreviousState(newState) = strucStages(i).States(ii);
                                strucStages(i+1).Decode(newState) = j-1;
                            end
                    case 'Soft'
                        accMetric = strucStages(i).Value(ii) + strucStages(i).llrMetric(ii,j);
                        if accMetric >= strucStages(i+1).Value(newState)
                            strucStages(i+1).Value(newState) = accMetric;
                            strucStages(i+1).PreviousState(newState) = strucStages(i).States(ii);
                            strucStages(i+1).Decode(newState) = j-1;
                        end
                    end

                end
            end
        end
    end
end
decodedMsg = NaN(1, stages-1);
for i = stages:-1:2
    switch softHard
        case 'Hard'
            [minValue, stateIndex] = min(strucStages(i).Value);
        case 'Soft'
            [maxValue, stateIndex] = max(strucStages(i).Value);
    end
    strucStages(i-1).SurviverPath = strucStages(i).PreviousState(stateIndex);
    strucStages(i-1).SurviverDecode = strucStages(i).Decode(stateIndex);
    decodedMsg(i-1) = strucStages(i-1).SurviverDecode;
end
[ crcError ] = crc_TS36212('Reciever', decodedMsg, parity);

